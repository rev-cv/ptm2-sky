from dotenv import load_dotenv
import os
from openai import OpenAI
import re
import json
from routers.ws_response_and_status import *

load_dotenv()

APIKEY = os.getenv("OPENROUTER_AI_KEY")
APIURL = os.getenv("OPENROUTER_AI_URL")

json_pattern = re.compile(r'```json\s*(.*?)\s*```', re.DOTALL)
json_obj_pattern = re.compile(r'\{.*\}', re.DOTALL)

async def run_open_ai(message, websocket, command):
    try:
        client = OpenAI(api_key=APIKEY, base_url=APIURL)
        stream = client.chat.completions.create(
            # model="google/gemma-3-27b-it:free",
            model="deepseek/deepseek-r1-0528:free",
            messages=[
                # {"role": "system", "content": system_prompt},
                {"role": "user", "content": message},
            ],
            stream=True
        )

        full_response = ""
        token_count = 0
        start_time = time.time()
        last_update_time = start_time

        for chunk in stream:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–∞–Ω–∫–µ
            if chunk.choices[0].delta.content is not None:
                content = chunk.choices[0].delta.content
                full_response += content
                token_count += 1
                
                # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                # print(content, end='', flush=True)
                
                # –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if current_time - last_update_time > 2:
                    elapsed = current_time - start_time
                    tokens_per_sec = token_count / elapsed if elapsed > 0 else 0
                    # print(f"\n[üìä –°—Ç–∞—Ç—É—Å: {token_count} —Ç–æ–∫–µ–Ω–æ–≤, {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω/—Å–µ–∫, {elapsed:.1f}—Å–µ–∫]")
                    await send_response(
                        websocket, 
                        command=command,
                        message=str(token_count),
                        status=G_Status.STREAM
                    )
                    last_update_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if chunk.choices[0].finish_reason is not None:
                break

    except Exception as e:
        print(f"Error in run_open_ai: {e}")
        print(f"Raw response: {full_response}")
        return None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
    try:
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown
        cleaned = clean_json_response(full_response)
        response = json.loads(cleaned)
        print(response)
        return response
    except json.JSONDecodeError as e:
        print(f"JSON parsing error: {e}")
        print(f"Raw response: {full_response}")
        return None
    

def clean_json_response(response_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç"""
    if not response_text:
        return None
    
    # json –±–ª–æ–∫ –º–µ–∂–¥—É ```json –∏ ```
    match = json_pattern.search(response_text)
    
    if match:
        # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω json –≤ markdown –±–ª–æ–∫–µ
        return match.group(1).strip()
    
    # –µ—Å–ª–∏ –Ω–µ—Ç markdown –±–ª–æ–∫–æ–≤, –∏—â–µ—Ç—Å—è json –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
    # –æ—Ç –ø–µ—Ä–≤–æ–π { –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π }
    match = json_obj_pattern.search(response_text)
    
    if match:
        return match.group(0).strip()
    
    return None

if __name__ == "__main__":
    print(run_open_ai(message="–ü—Ä–∏–≤–µ—Ç"))